{"version":3,"sources":["cell.js","grid.js","index.js"],"names":["Cell","cellStatus","this","props","value","isAlive","react_default","a","createElement","className","id","onClick","React","Component","Grid","state","rowCount","_this","columnCount","boardData","i","j","updateData","setState","data","_this2","map","boardRowData","singleCell","cell_Cell","handleClick","x","y","length","newProps","JSON","stringify","renderBoard","Game","initBoardData","history","initialiseGame","height","document","getElementById","width","alert","nextTurn","newGrid","push","updateCellState","arraysEqual","previousTurn","previousGrid","pop","currentState","neighbouringCells","neighbourX","neighbourY","totalNeighbours","array1","array2","name","type","bind","grid_Grid","ReactDOM","render","src_Game"],"mappings":"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","file":"static/js/main.6132f0eb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default class Cell extends React.Component{\r\n\r\n    render(){\r\n        let cellStatus = (this.props.value.isAlive ? \"cellAlive\" : \"cellDead\")\r\n\r\n        return (\r\n            <div className=\"cell\" id={cellStatus} onClick={this.props.onClick}>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react'\r\n\r\nimport Cell from './cell'\r\n\r\nexport default class Grid extends React.Component{\r\n\r\n    state = {\r\n        rowCount: this.props.rowCount,\r\n        columnCount: this.props.columnCount,\r\n        boardData: this.props.boardData\r\n    }\r\n\r\n    handleClick(i, j) {\r\n\r\n        let updateData = this.state.boardData;\r\n        updateData[j][i].isAlive = !this.state.boardData[j][i].isAlive;\r\n        \r\n        this.setState({\r\n            boardData: updateData\r\n        });\r\n    }\r\n\r\n    renderBoard(data){\r\n        return data.map((boardRowData) => {\r\n            return boardRowData.map((singleCell) => {\r\n                return (\r\n                    <div>\r\n                        <Cell\r\n                            onClick={ () => this.handleClick(singleCell.x, singleCell.y)}\r\n                            value={singleCell}\r\n                        />\r\n                    {(boardRowData[boardRowData.length - 1] === singleCell) ? <div id=\"newLine\" /> : \"\"}\r\n\r\n                    </div>)\r\n            })\r\n        })\r\n    }\r\n\r\n    //interface methd - updates state from parent class\r\n    componentWillReceiveProps(newProps){\r\n\r\n        if (JSON.stringify(this.props) !== JSON.stringify(newProps)){\r\n            this.setState({\r\n                rowCount: newProps.rowCount,\r\n                columnCount: newProps.columnCount,\r\n                boardData: newProps.boardData\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(            \r\n            <div id=\"mainGrid\">\r\n                <div id=\"instructions\">\r\n                    <p>Click a cell to highlight active cells.</p>\r\n                    <p>Once you are happy with the\r\n                    pattern just hit Next Turn as often as you can.</p> \r\n                </div>\r\n                    \r\n                {this.renderBoard(this.state.boardData)}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport Grid from './grid'\r\nimport './index.css';\r\n\r\nimport handleViewport from 'react-in-viewport';\r\n\r\nclass Game extends React.Component{\r\n\r\n    state = {\r\n        rowCount: 10,\r\n        columnCount: 10,\r\n        boardData: this.initBoardData(10, 10),\r\n        history: []\r\n    }\r\n\r\n    initialiseGame = () =>{\r\n        let height = document.getElementById(\"height\").value;\r\n        let width = document.getElementById(\"width\").value;\r\n\r\n        if (width > 20){\r\n            alert(\"Maximum width 20\");\r\n            width = 15;\r\n        }\r\n\r\n        if (height > 15){\r\n            alert(\"Maximum height 15\");\r\n            height = 15;\r\n        }\r\n\r\n        this.setState({\r\n            rowCount: height,\r\n            columnCount: width,\r\n            boardData: this.initBoardData(height, width),\r\n            history: []\r\n        }); \r\n     \r\n    }\r\n\r\n    initBoardData(rowCount, columnCount){\r\n\r\n        let data = [];\r\n        //columns\r\n        for (let i=0;i<rowCount;i++){\r\n            //rows\r\n            for (let j=0;j<columnCount;j++){\r\n                data.push([]);\r\n                data[i][j] = {\r\n                    x: j,\r\n                    y: i,\r\n                    isAlive: false\r\n                };\r\n            }\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    nextTurn = () =>{\r\n\r\n        let newGrid = [];\r\n\r\n        for (let i=0;i<this.state.rowCount;i++){\r\n            \r\n            for (let j=0;j<this.state.columnCount;j++){\r\n                newGrid.push([]);\r\n                newGrid[i][j] = {\r\n                    x: j,\r\n                    y: i,\r\n                    isAlive: false\r\n                };\r\n            }\r\n        }\r\n\r\n        //scan complete grid\r\n        for (let x=0;x<this.state.rowCount;x++){\r\n            for (let y=0;y<this.state.columnCount;y++){\r\n                newGrid[x][y].isAlive = this.updateCellState(this.state.boardData[x][y].isAlive,x,y); \r\n            }\r\n            \r\n        }\r\n\r\n        if (this.arraysEqual(this.state.boardData, newGrid)){\r\n            alert (\"No further changes can be made.\");\r\n        }else{\r\n            this.state.history.push(this.state.boardData);\r\n        }\r\n\r\n        this.setState({\r\n            boardData: newGrid\r\n        });\r\n    }\r\n\r\n    updateCellState(currentState, x,y){\r\n\r\n        let neighbouringCells = [];\r\n\r\n        //build neighbouring cells array for selected cell\r\n        for (var i=0;i<3;i++){\r\n            for (var j=0;j<3;j++){\r\n                \r\n                var neighbourX = x + i - 1;\r\n                var neighbourY = y + j - 1;\r\n\r\n                if (neighbourX >= 0 && neighbourX <= this.state.rowCount - 1 && neighbourY >= 0 && neighbourY <= this.state.columnCount - 1 //boundary checks\r\n                    && !(neighbourX === x && neighbourY === y)) //not same cell\r\n                { \r\n                    neighbouringCells.push(this.state.boardData[x + i - 1][y + j - 1].isAlive);\r\n                }           \r\n            }\r\n        }\r\n\r\n        //find total neighbouring cells that are alive\r\n        let totalNeighbours = 0;\r\n\r\n        for (let i=0;i<neighbouringCells.length;i++){\r\n\r\n            if (neighbouringCells[i])\r\n                totalNeighbours++;\r\n        }\r\n\r\n        //return state of cell\r\n        if (currentState){\r\n            if (totalNeighbours < 2)\r\n                return false;\r\n            else if (totalNeighbours === 2 || totalNeighbours === 3)\r\n                return true;\r\n            else\r\n                return true;\r\n        }else{\r\n            if (totalNeighbours === 3)\r\n                return true;\r\n        }\r\n    }\r\n\r\n    previousTurn = () =>{\r\n\r\n        if (this.state.history.length > 0){\r\n            let previousGrid = this.state.history[this.state.history.length-1];\r\n\r\n            this.setState({\r\n                boardData: previousGrid\r\n            });\r\n\r\n            //remove last element in history array after render\r\n            this.state.history.pop();\r\n        }else{\r\n            alert(\"No previous states available.\")\r\n        }\r\n    }\r\n\r\n    arraysEqual(array1, array2){\r\n\r\n        for (let i=0;i<this.state.rowCount;i++){\r\n            for (let j=0;j<this.state.columnCount;j++){\r\n                if (array1[i][j].isAlive !== array2[i][j].isAlive){\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div id=\"outerWrap\">\r\n                <header></header>\r\n                <div id=\"leftPane\">\r\n                    <h1>Game Of Life</h1>\r\n                    <p>Please enter the dimensions of the grid and hit Start Game button below. \r\n                    You can restart any time with new dimensions.</p>\r\n                    <label name=\"width\" className=\"gridLabel\">Width (max 20): </label>\r\n                    <input id=\"width\" type=\"text\" name=\"width\" className=\"gridSize\" />\r\n                    <label name=\"height\" className=\"gridLabel\">Height (max 15): </label>\r\n                    <input id=\"height\" type=\"text\" name=\"height\" className=\"gridSize\" />\r\n                    \r\n                    <button id=\"startButton\" onClick={this.initialiseGame}>Start Game</button>\r\n                    \r\n                    <div id=\"buttonPanel\">\r\n                        <button id=\"previousTurnButton\" onClick={this.previousTurn.bind(this)}>Previous Turn</button>\r\n                        <button id=\"nextTurnButton\" onClick={this.nextTurn.bind(this)}>Next Turn</button>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div id=\"mainContent\">                   \r\n                    <div id=\"game\">\r\n                        <Grid boardData = {this.state.boardData} rowCount = {this.state.rowCount} columnCount = {this.state.columnCount} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}